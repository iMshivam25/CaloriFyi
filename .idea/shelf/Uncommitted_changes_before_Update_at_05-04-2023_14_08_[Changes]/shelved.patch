Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>buildscript {\r\n    ext {\r\n        compose_ui_version = '1.3.1'\r\n    }\r\n}// Top-level build file where you can add configuration options common to all sub-projects/modules.\r\nplugins {\r\n    id 'com.android.application' version '7.3.1' apply false\r\n    id 'com.android.library' version '7.3.1' apply false\r\n    id 'org.jetbrains.kotlin.android' version '1.6.10' apply false\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle b/build.gradle
--- a/build.gradle	(revision 9c4a60b4e7772c2758c8d47ccee7753ab6484891)
+++ b/build.gradle	(date 1680418594920)
@@ -2,6 +2,7 @@
     ext {
         compose_ui_version = '1.3.1'
     }
+
 }// Top-level build file where you can add configuration options common to all sub-projects/modules.
 plugins {
     id 'com.android.application' version '7.3.1' apply false
Index: app/src/main/java/com/example/calorifyi/PredictionActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.calorifyi\r\n\r\nimport android.graphics.Bitmap\r\nimport android.graphics.ImageDecoder\r\nimport android.net.Uri\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.provider.MediaStore\r\nimport androidx.activity.ComponentActivity\r\nimport androidx.activity.compose.rememberLauncherForActivityResult\r\nimport androidx.activity.compose.setContent\r\nimport androidx.activity.result.contract.ActivityResultContracts\r\nimport androidx.compose.foundation.ExperimentalFoundationApi\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.material.*\r\nimport androidx.compose.material3.AlertDialogDefaults.shape\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.graphics.asImageBitmap\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport com.example.calorifyi.TensorFlowHelper.imageSize\r\nimport com.example.calorifyi.ui.theme.*\r\n\r\n\r\nclass PredictionActivity : ComponentActivity() {\r\n\r\n//    lateinit var model: FruitModelV1Optimize\r\n//    lateinit var imageView: ImageView\r\n//    lateinit var button: Button\r\n//    lateinit var bitmap: Bitmap\r\n//\r\n//    val labels = FileUtil.loadLabels(this, \"labels.txt\")\r\n//    var imageProcessor = ImageProcessor.Builder().add(ResizeOp(224, 224, ResizeOp.ResizeMethod.BILINEAR)).build()\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContent {\r\n            CaloriFyiTheme {\r\n                Surface(\r\n                    modifier = Modifier.fillMaxSize(),\r\n                    color = MaterialTheme.colors.background\r\n                ) {\r\n                    PredictView()\r\n                }\r\n            }\r\n\r\n//            model = FruitModelV1Optimize.newInstance(this)\r\n\r\n\r\n\r\n        }\r\n    }\r\n\r\n    private val imageSize = 224\r\n\r\n\r\n\r\n//    override fun onDestroy() {\r\n//        super.onDestroy()\r\n//        model.close()\r\n//    }\r\n//\r\n//    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?){\r\n//        super.onActivityResult(requestCode, resultCode, data)\r\n//        if(requestCode == 101){\r\n//            var uri = data?.data\r\n//            bitmap = MediaStore.Images.Media.getBitmap(this.contentResolver, uri)\r\n//\r\n//            getPredictions()\r\n//        }\r\n//    }\r\n}\r\n//\r\n\r\n//\r\n\r\n//\r\n//    fun getPredictions(){\r\n//\r\n//        var image = TensorImage.fromBitmap(bitmap)\r\n//        image = imageProcessor.process(image)\r\n\r\n\r\n\r\n\r\n// Creates inputs for reference.\r\n        //val inputFeature0 = TensorBuffer.createFixedSize(intArrayOf(1, 224, 224, 3), DataType.FLOAT32)\r\n\r\n// Runs model inference and gets result.\r\n        //val outputs = model.process(inputFeature0)\r\n        //val outputFeature0 = outputs.outputFeature0AsTensorBuffer\r\n\r\n// Releases model resources if no longer used.\r\n\r\n  //  }\r\n//}\r\n\r\n\r\n@OptIn(ExperimentalFoundationApi::class)\r\n@Composable\r\nfun PredictView() {\r\n    val cam3ctx = LocalContext.current\r\n    var photoUri by remember {\r\n        mutableStateOf<Uri?>(null)\r\n    }\r\n    var bitmap by remember {\r\n        mutableStateOf<Bitmap?>(null)\r\n    }\r\n    val galleryLauncher = rememberLauncherForActivityResult(\r\n        contract = ActivityResultContracts.GetContent(),\r\n        onResult = {\r\n            photoUri = it\r\n        }\r\n    )\r\n    \r\n    Scaffold(modifier = Modifier.fillMaxSize()) {\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxSize()\r\n                .background(onb),\r\n            horizontalAlignment = Alignment.CenterHorizontally,\r\n            verticalArrangement = Arrangement.Center,\r\n        ) {\r\n\r\n            photoUri?.let {\r\n                if (Build.VERSION.SDK_INT < 28)\r\n                    bitmap = MediaStore.Images.Media.getBitmap(cam3ctx.contentResolver, it)\r\n                else {\r\n                    val source = ImageDecoder.createSource(cam3ctx.contentResolver, it)\r\n                    bitmap = ImageDecoder.decodeBitmap(\r\n                        source,\r\n                        ImageDecoder.OnHeaderDecodedListener { decoder, info, source ->\r\n                            decoder.allocator = ImageDecoder.ALLOCATOR_SOFTWARE\r\n                            decoder.isMutableRequired = true\r\n                        })\r\n                }\r\n            }\r\n\r\n            bitmap?.let {\r\n                Image(\r\n                    bitmap = it.asImageBitmap(),\r\n                    contentDescription = \"Image from the gallery\",\r\n                    Modifier.size(400.dp)\r\n                )\r\n                Spacer(modifier = Modifier.padding(20.dp))\r\n\r\n                val scaledBitmap = Bitmap.createScaledBitmap(it, imageSize, imageSize, false);\r\n\r\n                TensorFlowHelper.classifyImage(scaledBitmap) {\r\n                    Column(\r\n                        modifier = Modifier\r\n                            .fillMaxWidth(),\r\n                        verticalArrangement = Arrangement.Center,\r\n                        horizontalAlignment = Alignment.CenterHorizontally,\r\n                    ) {\r\n                        var reception by remember(it) {\r\n                            mutableStateOf(emptyList<Reception>())\r\n                        }\r\n                        LaunchedEffect(it) {\r\n                            val newReception = recep(it)\r\n                            reception = newReception\r\n                        }\r\n\r\n//                        Text(text = \"Image is classified as:\", fontFamily = googleSans)\r\n                        Text(text = it, color = Color.Black, fontSize = 24.sp, fontFamily = googleSans)\r\n                        reception.forEach { item ->\r\n                            Text(\"\\n\\nPer ${item.quantity} gm \\n\\nCalories: ${item.calories}\", fontFamily = googleSans, textAlign = TextAlign.Start)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            \r\n            Spacer(modifier = Modifier.padding(25.dp))\r\n            \r\n            Button(onClick = { \r\n                galleryLauncher.launch(\"image/*\")\r\n            },\r\n                shape = RoundedCornerShape(12.dp),\r\n                modifier = Modifier.wrapContentSize(),\r\n                colors = ButtonDefaults.buttonColors(Purple200)\r\n                ) {\r\n                Text(\r\n                    text = \"Select an Image\",\r\n                    fontFamily = googleSans\r\n                )\r\n            }\r\n            \r\n        }\r\n    }\r\n}\r\n\r\n\r\n//fun getPredictions(byteBuffer: ByteBuffer){\r\n//    val model = FruitModelV1Optimize.newInstance()\r\n//\r\n//// Creates inputs for reference.\r\n//    val inputFeature0 = TensorBuffer.createFixedSize(intArrayOf(1, 224, 224, 3), DataType.FLOAT32)\r\n//    inputFeature0.loadBuffer(byteBuffer)\r\n//\r\n//// Runs model inference and gets result.\r\n//\r\n//    val outputs = model.process(inputFeature0)\r\n//    val outputFeature0 = outputs.outputFeature0AsTensorBuffer\r\n//\r\n//// Releases model resources if no longer used.\r\n//    model.close()\r\n//\r\n//}\r\n\r\n\r\n//    val intent = Intent()\r\n//    intent.type = \"image/*\"\r\n//    intent.action = Intent.ACTION_GET_CONTENT\r\n//\r\n//\r\n//    Column(){\r\n//        Button(\r\n//            onClick = { startActivityForResult() }) {\r\n//            Text(text = \"Select Images\")\r\n//        }\r\n//    }\r\n//}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/calorifyi/PredictionActivity.kt b/app/src/main/java/com/example/calorifyi/PredictionActivity.kt
--- a/app/src/main/java/com/example/calorifyi/PredictionActivity.kt	(revision 9c4a60b4e7772c2758c8d47ccee7753ab6484891)
+++ b/app/src/main/java/com/example/calorifyi/PredictionActivity.kt	(date 1680615390138)
@@ -10,13 +10,17 @@
 import androidx.activity.compose.rememberLauncherForActivityResult
 import androidx.activity.compose.setContent
 import androidx.activity.result.contract.ActivityResultContracts
-import androidx.compose.foundation.ExperimentalFoundationApi
-import androidx.compose.foundation.Image
-import androidx.compose.foundation.background
+import androidx.compose.foundation.*
+import androidx.compose.foundation.gestures.Orientation
+import androidx.compose.foundation.gestures.scrollable
 import androidx.compose.foundation.layout.*
+import androidx.compose.foundation.lazy.LazyColumn
+import androidx.compose.foundation.lazy.LazyListState
+import androidx.compose.foundation.lazy.LazyRow
+import androidx.compose.foundation.lazy.grid.LazyHorizontalGrid
+import androidx.compose.foundation.lazy.rememberLazyListState
 import androidx.compose.foundation.shape.RoundedCornerShape
 import androidx.compose.material.*
-import androidx.compose.material3.AlertDialogDefaults.shape
 import androidx.compose.runtime.*
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
@@ -26,8 +30,14 @@
 import androidx.compose.ui.text.style.TextAlign
 import androidx.compose.ui.unit.dp
 import androidx.compose.ui.unit.sp
-import com.example.calorifyi.TensorFlowHelper.imageSize
+import androidx.navigation.NavController
+import androidx.navigation.NavHostController
+import com.example.calorifyi.Navigation.Screen
 import com.example.calorifyi.ui.theme.*
+import org.tensorflow.lite.task.vision.detector.Detection
+import java.io.File
+import java.io.FileOutputStream
+
 
 
 class PredictionActivity : ComponentActivity() {
@@ -103,8 +113,22 @@
   //  }
 //}
 
+@Composable
+fun ScrollableColumn(
+    modifier: Modifier = Modifier,
+    content: @Composable ColumnScope.() -> Unit
+) {
+    BoxWithConstraints(modifier = modifier) {
+        val scrollState = rememberScrollState()
+        Column(modifier = Modifier.verticalScroll(scrollState)) {
+            content()
+        }
+    }
+}
+
 
-@OptIn(ExperimentalFoundationApi::class)
+
+
 @Composable
 fun PredictView() {
     val cam3ctx = LocalContext.current
@@ -120,8 +144,14 @@
             photoUri = it
         }
     )
-    
-    Scaffold(modifier = Modifier.fillMaxSize()) {
+
+    val scrollState = rememberScrollState()
+
+    Scaffold(
+        modifier = Modifier
+            .fillMaxSize()
+    ) {
+
         Column(
             modifier = Modifier
                 .fillMaxSize()
@@ -144,17 +174,34 @@
                 }
             }
 
+
             bitmap?.let {
-                Image(
-                    bitmap = it.asImageBitmap(),
-                    contentDescription = "Image from the gallery",
-                    Modifier.size(400.dp)
-                )
-                Spacer(modifier = Modifier.padding(20.dp))
+//                Image(
+//                    bitmap = it.asImageBitmap(),
+//                    contentDescription = "Image from the gallery",
+//                    Modifier.size(400.dp)
+//                )
+//                Spacer(modifier = Modifier.padding(20.dp))
 
-                val scaledBitmap = Bitmap.createScaledBitmap(it, imageSize, imageSize, false);
+//                val context = LocalContext.current
+//                val path = context.getExternalFilesDir(null)!!.absolutePath
+//
+//                val image = it
+//                val tempFile = File(path, "tempFile.jpg")
+//                val fOut = FileOutputStream(tempFile)
+//                image.compress(Bitmap.CompressFormat.JPEG, 100, fOut)
+//
+//                Button(onClick = {
+//                    navController.navigate(Screen.MakePrediction.route)
+//                },
+//                    shape = RoundedCornerShape(12.dp),
+//                    modifier = Modifier.wrapContentSize(),
+//                    colors = ButtonDefaults.buttonColors(Purple200)) {
+//                    Text(text = "Process", fontFamily = googleSans)
+//                }
 
-                TensorFlowHelper.classifyImage(scaledBitmap) {
+
+                ObjectDetectionHelper.ObjectDetect(bitmap = it) {
                     Column(
                         modifier = Modifier
                             .fillMaxWidth(),
@@ -170,32 +217,105 @@
                         }
 
 //                        Text(text = "Image is classified as:", fontFamily = googleSans)
-                        Text(text = it, color = Color.Black, fontSize = 24.sp, fontFamily = googleSans)
+
+                        Text(
+                            text = it,
+                            color = Color.Black,
+                            fontSize = 20.sp,
+                            fontFamily = googleSans
+                        )
                         reception.forEach { item ->
-                            Text("\n\nPer ${item.quantity} gm \n\nCalories: ${item.calories}", fontFamily = googleSans, textAlign = TextAlign.Start)
-                        }
-                    }
-                }
-            }
-            
+                            val tableData = listOf(
+                                Pair("Quantity: ", "${item.quantity} gm"),
+                                Pair("Calories: ", "${item.calories} kcal"),
+                                Pair("Fats: ", "${item.fats} gm"),
+                                Pair("Carbs: ", "${item.carbs} gm"),
+                                Pair("Proteins: ", "${item.proteins} gm")
+                            )
+                            Spacer(modifier = Modifier.height(25.dp))
+
+                            LazyColumn{
+                                items(tableData.size) { index ->
+                                    val rowData = tableData[index]
+
+                                    Row(
+                                        modifier = Modifier
+                                            .fillMaxWidth()
+                                            .padding(vertical = 8.dp)
+                                            .padding(start = 20.dp, end = 20.dp),
+                                        horizontalArrangement = Arrangement.SpaceBetween
+                                    ) {
+                                        Text(
+                                            text = rowData.first,
+                                            modifier = Modifier
+                                                .weight(1f)
+                                                .padding(start = 16.dp)
+                                        )
+                                        Text(
+                                            text = rowData.second,
+                                            modifier = Modifier
+                                                .weight(1f)
+                                                .padding(end = 16.dp),
+                                            textAlign = TextAlign.End
+                                        )
+                                    }
+
+
+                                }
+                            }
+
+                        }
+
+
+
+                    }
+
+                }
+//                TensorFlowHelper.classifyImage(scaledBitmap) {
+//                    Column(
+//                        modifier = Modifier
+//                            .fillMaxWidth(),
+//                        verticalArrangement = Arrangement.Center,
+//                        horizontalAlignment = Alignment.CenterHorizontally,
+//                    ) {
+//                        var reception by remember(it) {
+//                            mutableStateOf(emptyList<Reception>())
+//                        }
+//                        LaunchedEffect(it) {
+//                            val newReception = recep(it)
+//                            reception = newReception
+//                        }
+//
+////                        Text(text = "Image is classified as:", fontFamily = googleSans)
+//                        Text(text = it, color = Color.Black, fontSize = 24.sp, fontFamily = googleSans)
+//                        reception.forEach { item ->
+//                            Text("\n\nPer ${item.quantity} gm \n\nCalories: ${item.calories}", fontFamily = googleSans, textAlign = TextAlign.Start)
+//                        }
+//                    }
+
+            }
             Spacer(modifier = Modifier.padding(25.dp))
-            
-            Button(onClick = { 
-                galleryLauncher.launch("image/*")
-            },
+
+
+
+
+            Button(
+                onClick = {
+                    galleryLauncher.launch("image/*")
+                },
                 shape = RoundedCornerShape(12.dp),
                 modifier = Modifier.wrapContentSize(),
                 colors = ButtonDefaults.buttonColors(Purple200)
-                ) {
+            ) {
                 Text(
                     text = "Select an Image",
                     fontFamily = googleSans
                 )
             }
-            
         }
     }
 }
+
 
 
 //fun getPredictions(byteBuffer: ByteBuffer){
Index: app/src/main/java/com/example/calorifyi/PredictionActivity2.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.calorifyi\r\n\r\nimport android.content.Context\r\nimport android.os.Bundle\r\nimport androidx.activity.ComponentActivity\r\nimport androidx.activity.compose.setContent\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.material.MaterialTheme\r\nimport androidx.compose.material.Surface\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport coil.compose.rememberImagePainter\r\nimport com.example.calorifyi.ui.theme.CaloriFyiTheme\r\nimport java.io.File\r\n\r\nclass PredictionActivity2 : ComponentActivity() {\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContent {\r\n            CaloriFyiTheme {\r\n                // A surface container using the 'background' color from the theme\r\n                Surface(\r\n                    modifier = Modifier.fillMaxSize(),\r\n                    color = MaterialTheme.colors.background\r\n                ) {\r\n                    val img2 = intent.getStringExtra(\"img2\")\r\n                    MakePrediction(ctx = LocalContext.current, img2 = img2)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun MakePrediction(ctx: Context, img2: String?){\r\n    Column(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .fillMaxHeight()\r\n            .fillMaxSize(),\r\n        verticalArrangement = Arrangement.Center,\r\n        horizontalAlignment = Alignment.CenterHorizontally\r\n    ){\r\n        val imgFile = File(img2)\r\n        Image(\r\n            painter = rememberImagePainter(data = imgFile),\r\n            contentDescription = \"image\",\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .fillMaxHeight()\r\n        )\r\n    }\r\n\r\n}\r\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nfun DefaultPreview() {\r\n    CaloriFyiTheme {\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/calorifyi/PredictionActivity2.kt b/app/src/main/java/com/example/calorifyi/PredictionActivity2.kt
--- a/app/src/main/java/com/example/calorifyi/PredictionActivity2.kt	(revision 9c4a60b4e7772c2758c8d47ccee7753ab6484891)
+++ b/app/src/main/java/com/example/calorifyi/PredictionActivity2.kt	(date 1680600805840)
@@ -1,20 +1,33 @@
 package com.example.calorifyi
 
 import android.content.Context
+import android.graphics.BitmapFactory
 import android.os.Bundle
 import androidx.activity.ComponentActivity
 import androidx.activity.compose.setContent
 import androidx.compose.foundation.Image
+import androidx.compose.foundation.gestures.Orientation
+import androidx.compose.foundation.gestures.scrollable
 import androidx.compose.foundation.layout.*
+import androidx.compose.foundation.lazy.LazyColumn
 import androidx.compose.material.MaterialTheme
 import androidx.compose.material.Surface
-import androidx.compose.runtime.Composable
+import androidx.compose.material.Text
+import androidx.compose.runtime.*
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
+import androidx.compose.ui.graphics.Color
 import androidx.compose.ui.platform.LocalContext
+import androidx.compose.ui.text.style.TextAlign
 import androidx.compose.ui.tooling.preview.Preview
+import androidx.compose.ui.unit.dp
+import androidx.compose.ui.unit.sp
+import androidx.navigation.NavController
+import androidx.navigation.NavHostController
+import androidx.navigation.compose.rememberNavController
 import coil.compose.rememberImagePainter
 import com.example.calorifyi.ui.theme.CaloriFyiTheme
+import com.example.calorifyi.ui.theme.googleSans
 import java.io.File
 
 class PredictionActivity2 : ComponentActivity() {
@@ -28,8 +41,7 @@
                     modifier = Modifier.fillMaxSize(),
                     color = MaterialTheme.colors.background
                 ) {
-                    val img2 = intent.getStringExtra("img2")
-                    MakePrediction(ctx = LocalContext.current, img2 = img2)
+
                 }
             }
         }
@@ -37,7 +49,12 @@
 }
 
 @Composable
-fun MakePrediction(ctx: Context, img2: String?){
+fun MakePrediction(){
+    val context = LocalContext.current
+    val path = context.getExternalFilesDir(null)!!.absolutePath
+    val imagePath = "$path/tempFile.jpg"
+
+    val image = BitmapFactory.decodeFile(imagePath)
     Column(
         modifier = Modifier
             .fillMaxWidth()
@@ -46,14 +63,71 @@
         verticalArrangement = Arrangement.Center,
         horizontalAlignment = Alignment.CenterHorizontally
     ){
-        val imgFile = File(img2)
-        Image(
-            painter = rememberImagePainter(data = imgFile),
-            contentDescription = "image",
-            modifier = Modifier
-                .fillMaxWidth()
-                .fillMaxHeight()
-        )
+        ObjectDetectionHelper.ObjectDetect(bitmap = image) {
+            Column(
+                modifier = Modifier
+                    .fillMaxWidth(),
+                verticalArrangement = Arrangement.Center,
+                horizontalAlignment = Alignment.CenterHorizontally,
+            ) {
+                var reception by remember(it) {
+                    mutableStateOf(emptyList<Reception>())
+                }
+                LaunchedEffect(it) {
+                    val newReception = recep(it)
+                    reception = newReception
+                }
+
+//                        Text(text = "Image is classified as:", fontFamily = googleSans)
+                Text(
+                    text = it,
+                    color = Color.Black,
+                    fontSize = 24.sp,
+                    fontFamily = googleSans
+                )
+                reception.forEach { item ->
+                    val tableData = listOf(
+                        Pair("Quantity: ", "${item.quantity} gm"),
+                        Pair("Calories: ", "${item.calories} kcal"),
+                        Pair("Fats: ", "${item.fats} gm"),
+                        Pair("Carbs: ", "${item.carbs} gm"),
+                        Pair("Proteins: ", "${item.proteins} gm")
+                    )
+                    Spacer(modifier = Modifier.height(25.dp))
+                    LazyColumn {
+                        items(tableData.size) { index ->
+                            val rowData = tableData[index]
+                            Row(
+                                modifier = Modifier
+                                    .fillMaxWidth()
+                                    .padding(vertical = 8.dp)
+                                    .padding(start = 20.dp, end = 20.dp),
+                                horizontalArrangement = Arrangement.SpaceBetween
+                            ) {
+                                Text(
+                                    text = rowData.first,
+                                    modifier = Modifier
+                                        .weight(1f)
+                                        .padding(start = 16.dp)
+                                )
+                                Text(
+                                    text = rowData.second,
+                                    modifier = Modifier
+                                        .weight(1f)
+                                        .padding(end = 16.dp),
+                                    textAlign = TextAlign.End
+                                )
+                            }
+                        }
+                    }
+
+                }
+
+
+
+            }
+
+        }
     }
 
 }
Index: app/src/main/java/com/example/calorifyi/Navigation/Screen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.calorifyi.Navigation\r\n\r\nimport com.example.calorifyi.R\r\n\r\nsealed class Screen(val route: String) {\r\n    object Splash : Screen(\"splash_screen\")\r\n    object Home : Screen(\"Home_screen\")\r\n    object Welcome : Screen(\"welcome_screen\")\r\n    object Onboarding : Screen(\"Onboarding_Screen\")\r\n    object CameraView : Screen(\"camera_view\")\r\n    object AppView : Screen(\"app_view\")\r\n    object LogIn : Screen(\"LogIn\")\r\n    object SignUp : Screen(\"SignUp\")\r\n}\r\n\r\nsealed class BottomNavigationItems(val route: String, var icon: Int, var title: String){\r\n    object Home : BottomNavigationItems(\"home_screen\", R.drawable.home, \"Home\")\r\n    object Progress : BottomNavigationItems(\"progress_view\", R.drawable.progress, \"Progress\")\r\n    object Analysis : BottomNavigationItems(\"analysis_view\", R.drawable.analysis, \"Analysis\")\r\n    object Diet : BottomNavigationItems(\"diet_view\", R.drawable.diet, \"Diet\")\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/calorifyi/Navigation/Screen.kt b/app/src/main/java/com/example/calorifyi/Navigation/Screen.kt
--- a/app/src/main/java/com/example/calorifyi/Navigation/Screen.kt	(revision 9c4a60b4e7772c2758c8d47ccee7753ab6484891)
+++ b/app/src/main/java/com/example/calorifyi/Navigation/Screen.kt	(date 1680600674991)
@@ -11,6 +11,9 @@
     object AppView : Screen("app_view")
     object LogIn : Screen("LogIn")
     object SignUp : Screen("SignUp")
+
+    object MakePrediction : Screen("Process")
+    object PredictView : Screen("PredictView")
 }
 
 sealed class BottomNavigationItems(val route: String, var icon: Int, var title: String){
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    id 'com.android.application'\r\n    id 'org.jetbrains.kotlin.android'\r\n}\r\n\r\nandroid {\r\n    namespace 'com.example.calorifyi'\r\n    compileSdk 33\r\n\r\n    defaultConfig {\r\n        applicationId \"com.example.calorifyi\"\r\n        minSdk 21\r\n        targetSdk 33\r\n        versionCode 1\r\n        versionName \"1.0\"\r\n\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n        vectorDrawables {\r\n            useSupportLibrary true\r\n        }\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_1_8\r\n        targetCompatibility JavaVersion.VERSION_1_8\r\n    }\r\n    kotlinOptions {\r\n        jvmTarget = '1.8'\r\n    }\r\n    buildFeatures {\r\n        compose true\r\n        mlModelBinding true\r\n        viewBinding true\r\n    }\r\n    composeOptions {\r\n        kotlinCompilerExtensionVersion '1.1.1'\r\n    }\r\n    packagingOptions {\r\n        resources {\r\n            excludes += '/META-INF/{AL2.0,LGPL2.1}'\r\n        }\r\n    }\r\n    aaptOptions {\r\n        noCompress \"tflite\"\r\n    }\r\n}\r\n\r\ndependencies {\r\n    implementation 'androidx.core:core-ktx:1.7.0'\r\n    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.1'\r\n    implementation 'androidx.activity:activity-compose:1.3.1'\r\n    implementation \"androidx.compose.ui:ui:$compose_ui_version\"\r\n    implementation \"androidx.compose.ui:ui-tooling-preview:$compose_ui_version\"\r\n    implementation 'androidx.compose.material:material:1.1.1'\r\n    implementation \"androidx.navigation:navigation-compose:2.4.0-alpha04\"\r\n    implementation 'org.tensorflow:tensorflow-lite-support:0.1.0'\r\n    implementation 'org.tensorflow:tensorflow-lite-metadata:0.1.0'\r\n    implementation 'org.tensorflow:tensorflow-lite-gpu:2.3.0'\r\n    implementation 'org.tensorflow:tensorflow-lite:2.5.0'\r\n    implementation('org.tensorflow:tensorflow-lite:0.0.0-nightly') { changing = true }\r\n    implementation('org.tensorflow:tensorflow-lite-gpu:0.0.0-nightly') { changing = true }\r\n    implementation('org.tensorflow:tensorflow-lite-support:0.0.0-nightly') { changing = true }\r\n    implementation 'com.google.android.material:material:1.4.0'\r\n    implementation 'androidx.appcompat:appcompat:1.5.1'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'\r\n    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.3'\r\n    implementation 'androidx.navigation:navigation-ui-ktx:2.5.3'\r\n    implementation 'androidx.navigation:navigation-compose:2.5.3'\r\n    testImplementation 'junit:junit:4.13.2'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.4'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.0'\r\n    androidTestImplementation \"androidx.compose.ui:ui-test-junit4:$compose_ui_version\"\r\n    debugImplementation \"androidx.compose.ui:ui-tooling:$compose_ui_version\"\r\n    debugImplementation \"androidx.compose.ui:ui-test-manifest:$compose_ui_version\"\r\n\r\n\r\n    // lottie\r\n    implementation 'com.airbnb.android:lottie-compose:5.2.0'\r\n\r\n    // CameraX\r\n    def camerax_version = \"1.1.0\"\r\n    implementation \"androidx.camera:camera-core:$camerax_version\"\r\n    implementation \"androidx.camera:camera-camera2:$camerax_version\"\r\n    implementation \"androidx.camera:camera-lifecycle:$camerax_version\"\r\n    implementation \"androidx.camera:camera-view:1.1.0\"\r\n    implementation \"com.google.accompanist:accompanist-permissions:0.19.0\"\r\n\r\n    implementation \"androidx.compose.material:material-icons-extended:$compose_ui_version\"\r\n\r\n    // Coil\r\n    implementation \"io.coil-kt:coil-compose:2.2.2\"\r\n\r\n    // accompanist\r\n    implementation \"com.google.accompanist:accompanist-pager:0.24.13-rc\"\r\n    implementation \"com.google.accompanist:accompanist-pager-indicators:0.18.0\"\r\n\r\n    implementation(\"androidx.compose.material3:material3:1.0.1\")\r\n    implementation(\"androidx.compose.material3:material3-window-size-class:1.0.1\")\r\n\r\n    //JDBC driver\r\n    implementation 'net.sourceforge.jtds:jtds:1.3.1'\r\n\r\n    //Hikari CP for Connection pooling\r\n    implementation(\"com.zaxxer:HikariCP:5.0.0\")\r\n\r\n//    implementation \"javax.security.sasl:sasl-api:1.0.1\"\r\n    implementation \"androidx.compose.foundation:foundation:1.0.0-alpha08\"\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle b/app/build.gradle
--- a/app/build.gradle	(revision 9c4a60b4e7772c2758c8d47ccee7753ab6484891)
+++ b/app/build.gradle	(date 1680613761942)
@@ -49,6 +49,13 @@
     aaptOptions {
         noCompress "tflite"
     }
+
+    configurations.all {
+        resolutionStrategy {
+            force "org.tensorflow:tensorflow-lite-support-api:0.3.1"
+        }
+    }
+
 }
 
 dependencies {
@@ -59,13 +66,14 @@
     implementation "androidx.compose.ui:ui-tooling-preview:$compose_ui_version"
     implementation 'androidx.compose.material:material:1.1.1'
     implementation "androidx.navigation:navigation-compose:2.4.0-alpha04"
-    implementation 'org.tensorflow:tensorflow-lite-support:0.1.0'
+    implementation 'org.tensorflow:tensorflow-lite-support:0.3.1'
     implementation 'org.tensorflow:tensorflow-lite-metadata:0.1.0'
     implementation 'org.tensorflow:tensorflow-lite-gpu:2.3.0'
-    implementation 'org.tensorflow:tensorflow-lite:2.5.0'
+    implementation 'org.tensorflow:tensorflow-lite:2.7.0'
     implementation('org.tensorflow:tensorflow-lite:0.0.0-nightly') { changing = true }
     implementation('org.tensorflow:tensorflow-lite-gpu:0.0.0-nightly') { changing = true }
     implementation('org.tensorflow:tensorflow-lite-support:0.0.0-nightly') { changing = true }
+    implementation 'org.tensorflow:tensorflow-lite-task-vision:0.3.1'
     implementation 'com.google.android.material:material:1.4.0'
     implementation 'androidx.appcompat:appcompat:1.5.1'
     implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
@@ -110,5 +118,5 @@
     implementation("com.zaxxer:HikariCP:5.0.0")
 
 //    implementation "javax.security.sasl:sasl-api:1.0.1"
-    implementation "androidx.compose.foundation:foundation:1.0.0-alpha08"
+    implementation "androidx.compose.foundation:foundation:1.1.0"
 }
\ No newline at end of file
Index: app/src/main/java/com/example/calorifyi/SignUp2.kt
===================================================================
diff --git a/app/src/main/java/com/example/calorifyi/SignUp2.kt b/app/src/main/java/com/example/calorifyi/SignUp2.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/calorifyi/SignUp2.kt	(revision 9c4a60b4e7772c2758c8d47ccee7753ab6484891)
+++ /dev/null	(revision 9c4a60b4e7772c2758c8d47ccee7753ab6484891)
@@ -1,231 +0,0 @@
-//package com.example.calorifyi
-//
-//import android.widget.Toast
-//import androidx.compose.foundation.Image
-//import androidx.compose.foundation.background
-//import androidx.compose.foundation.layout.*
-//import androidx.compose.foundation.shape.RoundedCornerShape
-//import androidx.compose.foundation.text.ClickableText
-//import androidx.compose.foundation.text.KeyboardOptions
-//import androidx.compose.material.*
-//import androidx.compose.runtime.Composable
-//import androidx.compose.runtime.mutableStateOf
-//import androidx.compose.runtime.remember
-//import androidx.compose.ui.Alignment
-//import androidx.compose.ui.Modifier
-//import androidx.compose.ui.draw.clip
-//import androidx.compose.ui.graphics.Color
-//import androidx.compose.ui.platform.LocalContext
-//import androidx.compose.ui.res.colorResource
-//import androidx.compose.ui.res.painterResource
-//import androidx.compose.ui.text.TextStyle
-//import androidx.compose.ui.text.font.FontWeight
-//import androidx.compose.ui.text.input.KeyboardType
-//import androidx.compose.ui.text.input.PasswordVisualTransformation
-//import androidx.compose.ui.text.input.TextFieldValue
-//import androidx.compose.ui.unit.dp
-//import androidx.compose.ui.unit.sp
-//import androidx.navigation.NavController
-//import com.example.calorifyi.Navigation.Screen
-//import com.example.calorifyi.ui.theme.googleSans
-//import com.example.calorifyi.ui.theme.onb
-//import kotlinx.coroutines.CoroutineScope
-//import kotlinx.coroutines.Dispatchers
-//import kotlinx.coroutines.launch
-//import kotlinx.coroutines.withContext
-//import java.sql.Connection
-//import java.sql.DriverManager
-//
-//@Composable
-//fun SignUpWrapper( navController: NavController ) {
-//    val context = LocalContext.current
-//    val isLoading = remember { mutableStateOf(false) }
-//    val firstName = remember { mutableStateOf(TextFieldValue()) }
-//    val lastName = remember { mutableStateOf(TextFieldValue()) }
-//    val username = remember { mutableStateOf(TextFieldValue()) }
-//    val password = remember { mutableStateOf(TextFieldValue()) }
-//    val email = remember { mutableStateOf(TextFieldValue()) }
-//
-//    Box(
-//        modifier = Modifier
-//            .fillMaxSize()
-//            .background(onb)
-//    ) {
-//
-//    }
-//    Column(
-//        modifier = Modifier.fillMaxSize(),
-//        horizontalAlignment = Alignment.CenterHorizontally,
-//    ) {
-//        Box(
-//            modifier = Modifier
-//                .fillMaxWidth()
-//                .height(150.dp)
-//                .padding(top = 10.dp)
-//        ){
-//            Image(
-//                painter = painterResource(id = R.drawable.signup),
-//                contentDescription = "Banner",
-//                modifier = Modifier
-//                    .fillMaxSize()
-//                    .clip(RoundedCornerShape(55.dp)))
-//        }
-//
-//        Spacer(modifier = Modifier.height(30.dp))
-////        Spacer(modifier = Modifier.height(45.dp))
-//
-//        Box(
-//            modifier = Modifier.padding(40.dp, 0.dp, 40.dp, 0.dp)
-//        ){
-//            Button(
-//                onClick = {
-//                    if (firstName.value.text.isEmpty() ||
-//                        lastName.value.text.isEmpty() ||
-//                        username.value.text.isEmpty() ||
-//                        email.value.text.isEmpty() ||
-//                        password.value.text.isEmpty()
-//                    ) {
-//                        Toast.makeText(
-//                            context,
-//                            "Pehle entry daal tb hi hoga signup",
-//                            Toast.LENGTH_SHORT
-//                        ).show()
-//                    } else {
-//                        isLoading.value = true
-//                        val scope = CoroutineScope(Dispatchers.IO)
-//                        scope.launch {
-//                            val signup = signupAttempt()
-//                            signup?.let {
-//                                val query =
-//                                    "INSERT INTO user_info (FirstName, LastName, Username, Email, Password) VALUES ('${firstName.value.text}','${lastName.value.text}', '${username.value.text}', '${email.value.text}','${password.value.text}')"
-//                                val statement = signup.createStatement()
-//                                val rowsAffected = statement.executeUpdate(query)
-//                                if (rowsAffected > 0) {
-//                                    withContext(Dispatchers.Main) {
-//                                        isLoading.value = false
-//                                        navController.navigate(Screen.LogIn.route)
-//                                    }
-//                                } else {
-//                                    // insertion failed
-//                                }
-//                            }
-//                        }
-//                    }
-//                },
-//                shape = RoundedCornerShape(50.dp),
-//                modifier = Modifier
-//                    .fillMaxWidth()
-//                    .height(50.dp)
-//
-//            ) {
-//                if (isLoading.value) { // If the flag is true, show the progress indicator
-//                    CircularProgressIndicator(color = Color.White)
-//                }
-//                else{}
-//                Text(text = "Sign Up", color = Color.White, fontFamily = googleSans)
-//            }
-//        }
-//        Spacer(modifier = Modifier.height(40.dp))
-//
-//    }
-//}
-//
-//@Composable
-//fun personalInfo(firstName: TextFieldValue, lastName: TextFieldValue, username: TextFieldValue, email: TextFieldValue, password: TextFieldValue)
-//{
-//    Text(text = "1. General Information", style = TextStyle(fontSize = 20.sp, fontWeight = FontWeight.Bold), fontFamily = googleSans, color = colorResource(
-//        id = R.color.usepurple))
-//
-//    Spacer(modifier = Modifier.height(30.dp))
-//
-//    Row(modifier = Modifier.fillMaxWidth()) {
-//        OutlinedTextField(
-//            label = { Text(text = "First Name" + if (firstName.value.text.isEmpty()) "*" else "",
-//                color = if (firstName.value.text.isEmpty()) Color.Red else Color.Black)},
-//            value = firstName.value,
-//            shape = RoundedCornerShape(50),
-//            onValueChange = { firstName.value = it },
-//            modifier = Modifier
-//                .weight(1f)
-//                .padding(start = 30.dp)
-//                .height(60.dp)
-//        )
-//        Spacer(modifier = Modifier.width(16.dp))
-//        OutlinedTextField(
-//            label = { Text(text = "Last Name" + if (lastName.value.text.isEmpty()) "*" else "",
-//                color = if (lastName.value.text.isEmpty()) Color.Red else Color.Black )},
-//            value = lastName.value,
-//            shape = RoundedCornerShape(50),
-//            onValueChange = { lastName.value = it },
-//            modifier = Modifier
-//                .weight(1f)
-//                .padding(end = 30.dp)
-//                .height(60.dp)
-//        )
-//    }
-//    Column(modifier = Modifier
-//        .fillMaxWidth()
-//        .padding(start = 30.dp)){
-//
-//        Spacer(modifier = Modifier.height(20.dp))
-//
-//        OutlinedTextField(
-//            label = { Text(text = "Username" + if (username.value.text.isEmpty()) "*" else "",
-//                color = if (username.value.text.isEmpty()) Color.Red else Color.Black )},
-//            value = username.value,
-//            shape = RoundedCornerShape(50),
-//            onValueChange = {username.value = it},
-//            modifier = Modifier
-//                .fillMaxWidth()
-//                .padding(end = 30.dp)
-//                .height(60.dp))
-//
-//        Spacer(modifier = Modifier.height(20.dp))
-//
-//        OutlinedTextField(
-//            label = { Text(text = "Email" + if (email.value.text.isEmpty()) "*" else "",
-//                color = if (email.value.text.isEmpty()) Color.Red else Color.Black )},
-//            value = email.value,
-//            onValueChange = {email.value = it},
-//            shape = RoundedCornerShape(50),
-//            modifier = Modifier
-//                .fillMaxWidth()
-//                .padding(end = 30.dp)
-//                .height(60.dp))
-//
-//        Spacer(modifier = Modifier.height(20.dp))
-//
-//        OutlinedTextField(
-//            label = { Text(text = "Password" + if (password.value.text.isEmpty()) "*" else "",
-//                color = if (password.value.text.isEmpty()) Color.Red else Color.Black )},
-//            value = password.value,
-//            shape = RoundedCornerShape(50),
-//            visualTransformation = PasswordVisualTransformation(),
-//            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),
-//            onValueChange = {password.value = it},
-//            modifier = Modifier
-//                .fillMaxWidth()
-//                .padding(end = 30.dp)
-//                .height(60.dp)
-//        )
-//    }
-//
-//
-//
-//}
-//
-//fun signupAttempt(): Connection? {
-//    val host = "SQL8002.site4now.net"
-//    val port = "1433"
-//    val database = "db_a963e4_quantunfcc"
-//    val admin_username = "db_a963e4_quantunfcc_admin"
-//    val admin_password = "Pratyushkr.123@"
-//    val url = "jdbc:jtds:sqlserver://$host:$port/$database"
-//
-//    return try {
-//        Class.forName("net.sourceforge.jtds.jdbc.Driver")
-//        DriverManager.getConnection(url, admin_username, admin_password)
-//    } catch (e: Exception) {
-//        null
-//    }
-//}
Index: settings.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>pluginManagement {\r\n    repositories {\r\n        gradlePluginPortal()\r\n        google()\r\n        mavenCentral()\r\n    }\r\n}\r\ndependencyResolutionManagement {\r\n    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)\r\n    repositories {\r\n        google()\r\n        mavenCentral()\r\n    }\r\n}\r\nrootProject.name = \"CaloriFyi\"\r\ninclude ':app'\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/settings.gradle b/settings.gradle
--- a/settings.gradle	(revision 9c4a60b4e7772c2758c8d47ccee7753ab6484891)
+++ b/settings.gradle	(date 1680418864459)
@@ -3,6 +3,9 @@
         gradlePluginPortal()
         google()
         mavenCentral()
+        maven {
+            url "https://google.bintray.com/mlkit"
+        }
     }
 }
 dependencyResolutionManagement {
@@ -10,6 +13,9 @@
     repositories {
         google()
         mavenCentral()
+        maven {
+            url "https://google.bintray.com/mlkit"
+        }
     }
 }
 rootProject.name = "CaloriFyi"
Index: app/src/main/java/com/example/calorifyi/ObjectDetectionHelper.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/calorifyi/ObjectDetectionHelper.kt b/app/src/main/java/com/example/calorifyi/ObjectDetectionHelper.kt
new file mode 100644
--- /dev/null	(date 1680611844745)
+++ b/app/src/main/java/com/example/calorifyi/ObjectDetectionHelper.kt	(date 1680611844745)
@@ -0,0 +1,152 @@
+package com.example.calorifyi
+
+import android.graphics.*
+import androidx.compose.foundation.Image
+import androidx.compose.foundation.layout.Spacer
+import androidx.compose.foundation.layout.aspectRatio
+import androidx.compose.foundation.layout.height
+import androidx.compose.foundation.layout.wrapContentSize
+import androidx.compose.material.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.remember
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.graphics.asImageBitmap
+import androidx.compose.ui.platform.LocalContext
+import androidx.compose.ui.unit.dp
+import com.example.calorifyi.ui.theme.googleSans
+import org.tensorflow.lite.support.image.TensorImage
+import org.tensorflow.lite.task.vision.detector.Detection
+import org.tensorflow.lite.task.vision.detector.ObjectDetector
+
+object ObjectDetectionHelper{
+
+    @Composable
+    fun ObjectDetect(bitmap: Bitmap, callback : (@Composable (fruit : String) -> Unit)){
+        val image = TensorImage.fromBitmap(bitmap)
+
+        // Step 2: Initialize the detector object
+        val options = ObjectDetector.ObjectDetectorOptions.builder()
+            .setMaxResults(5)
+            .setScoreThreshold(0.3f)
+            .build()
+        val detector = ObjectDetector.createFromFileAndOptions(
+            LocalContext.current,
+            "model.tflite",
+            options
+        )
+
+
+
+        // Step 3: Feed given image to the detector
+        val results = detector.detect(image)
+
+        // Step 4: Parse the detection result and show it
+        val resultToDisplay = results.map {
+            // Get the top-1 category and craft the display text
+            val category = it.categories.first()
+            val text = "${category.label}, ${category.score.times(100).toInt()}%"
+
+            // Create a data object to display the detection result
+            DetectionResult(it.boundingBox, text)
+        }
+        // Draw the detection result on the bitmap and show it.
+        val imageBitmap = bitmap.asImageBitmap()
+        val imgWithResult = drawDetectionResult(bitmap, resultToDisplay)
+        val modifier = Modifier
+            .wrapContentSize()
+            .aspectRatio(imageBitmap.width.toFloat() / imageBitmap.height)
+        Image(bitmap = imgWithResult.asImageBitmap(), contentDescription = null, modifier = modifier)
+
+//        DebugPrint(results = results)
+        Spacer(modifier = Modifier.height(10.dp))
+
+
+        var outputs: List<String>
+
+        for (obj in results) {
+            for (category in obj.categories) {
+                val confidence: Int = category.score.times(100).toInt()
+                val labels = setOf(category.label.toString())
+
+
+                if (confidence>50){
+                    outputs = labels.toList()
+                    for (z in outputs){
+                        callback.invoke(z)
+                    }
+                }
+            }
+        }
+
+
+
+//        return results.count()
+    }
+    
+    @Composable
+    fun DebugPrint(results : List<Detection>) {
+        for ((i, obj) in results.withIndex()) {
+            val box = obj.boundingBox
+
+
+            Text("Detected object: $i ")
+            Text("  boundingBox: (${box.left}, ${box.top}) - (${box.right},${box.bottom})")
+
+            for ((j, category) in obj.categories.withIndex()) {
+                Text("    Label $j: ${category.label}")
+                val confidence: Int = category.score.times(100).toInt()
+                Text("    Confidence: ${confidence}%")
+            }
+        }
+    }
+
+
+
+    private fun drawDetectionResult(
+        bitmap: Bitmap,
+        detectionResults: List<DetectionResult>
+    ): Bitmap {
+        val outputBitmap = bitmap.copy(Bitmap.Config.ARGB_8888, true)
+        val canvas = Canvas(outputBitmap)
+        val pen = Paint()
+        pen.textAlign = Paint.Align.LEFT
+
+        detectionResults.forEach {
+            // draw bounding box
+            pen.color = Color.BLUE
+            pen.strokeWidth = 4F
+            pen.style = Paint.Style.STROKE
+            val box = it.boundingBox
+            canvas.drawRect(box, pen)
+
+
+            val tagSize = Rect(0, 0, 0, 0)
+
+            // calculate the right font size
+            pen.style = Paint.Style.FILL_AND_STROKE
+            pen.color = Color.GREEN
+            pen.strokeWidth = 2F
+
+            pen.textSize = 80F
+            pen.getTextBounds(it.text, 0, it.text.length, tagSize)
+            val fontSize: Float = pen.textSize * box.width() / tagSize.width()
+
+            // adjust the font size so texts are inside the bounding box
+            if (fontSize < pen.textSize) pen.textSize = fontSize
+
+            var margin = (box.width() - tagSize.width()) / 2.0F
+            if (margin < 0F) margin = 0F
+            canvas.drawText(
+                it.text, box.left + margin,
+                box.top + tagSize.height().times(1F), pen
+            )
+        }
+        return outputBitmap
+    }
+
+    data class DetectionResult(val boundingBox: RectF, val text: String)
+
+
+}
\ No newline at end of file
